/**
 * Sample APILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { anyOf, Schema, validateAndMap } from '../../schema';
import { Pricing, pricingSchema } from '../pricing';
import { Pricing1, pricing1Schema } from '../pricing1';
import { Pricing2, pricing2Schema } from '../pricing2';
import { Pricing3, pricing3Schema } from '../pricing3';
import { Pricing4, pricing4Schema } from '../pricing4';
import { Pricing5, pricing5Schema } from '../pricing5';
import { Pricing6, pricing6Schema } from '../pricing6';

/** This is a container type for any-of types. */
export type ItemsRequestPricing =
  | Pricing
  | Pricing1
  | Pricing2
  | Pricing3
  | Pricing4
  | Pricing5
  | Pricing6;

export const itemsRequestPricingSchema: Schema<ItemsRequestPricing> = anyOf([
  pricingSchema,
  pricing1Schema,
  pricing2Schema,
  pricing3Schema,
  pricing4Schema,
  pricing5Schema,
  pricing6Schema,
]);

export namespace ItemsRequestPricing {
  /**
   * Validation method to narrow down union type to Pricing type case.
   *
   * This is Pricing case.
   */
  export function isPricing(value: unknown): value is Pricing {
    const validationResult = validateAndMap(value, pricingSchema);
    return validationResult.errors === false;
  }

  /**
   * Validation method to narrow down union type to Pricing1 type case.
   *
   * This is Pricing1 case.
   */
  export function isPricing1(value: unknown): value is Pricing1 {
    const validationResult = validateAndMap(value, pricing1Schema);
    return validationResult.errors === false;
  }

  /**
   * Validation method to narrow down union type to Pricing2 type case.
   *
   * This is Pricing2 case.
   */
  export function isPricing2(value: unknown): value is Pricing2 {
    const validationResult = validateAndMap(value, pricing2Schema);
    return validationResult.errors === false;
  }

  /**
   * Validation method to narrow down union type to Pricing3 type case.
   *
   * This is Pricing3 case.
   */
  export function isPricing3(value: unknown): value is Pricing3 {
    const validationResult = validateAndMap(value, pricing3Schema);
    return validationResult.errors === false;
  }

  /**
   * Validation method to narrow down union type to Pricing4 type case.
   *
   * This is Pricing4 case.
   */
  export function isPricing4(value: unknown): value is Pricing4 {
    const validationResult = validateAndMap(value, pricing4Schema);
    return validationResult.errors === false;
  }

  /**
   * Validation method to narrow down union type to Pricing5 type case.
   *
   * This is Pricing5 case.
   */
  export function isPricing5(value: unknown): value is Pricing5 {
    const validationResult = validateAndMap(value, pricing5Schema);
    return validationResult.errors === false;
  }

  /**
   * Validation method to narrow down union type to Pricing6 type case.
   *
   * This is Pricing6 case.
   */
  export function isPricing6(value: unknown): value is Pricing6 {
    const validationResult = validateAndMap(value, pricing6Schema);
    return validationResult.errors === false;
  }
}
